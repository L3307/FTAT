on:
  # Use workflow dispatch for manual triggering and schedule for timed execution
  workflow_dispatch:
  # schedule:
  # - cron: '*/60 * * * *'

# Use this file as a template to create new workflows for API endpoint status check
name: Check API Status and add data to DB

# Declare the variables
env:
  NAME_OF_TOOL: AEGIS
  API_ENDPOINT: https://httpstat.us/404
  EMAIL_RECIPIENTS: conales.jt@pg.com

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Check API Status
        id: api_status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.API_ENDPOINT }})
          echo "STATE=${response}" >> $GITHUB_ENV
          echo "DATETIME=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

      - name: Use API Status
        id: api_status_check
        run: |
          if [ "${{ env.STATE }}" = "200" ]; then
            echo "API endpoint is up and running"
            echo "send_email=false" >> $GITHUB_ENV
            echo "API_STATUS=active" >> $GITHUB_ENV
          else
            echo "API endpoint is not accessible"
            echo "send_email=true" >> $GITHUB_ENV
            echo "API_STATUS=down" >> $GITHUB_ENV
          fi
          # Pass API_STATUS and DATETIME as outputs
          echo "::set-output name=api_status::$API_STATUS"
          echo "::set-output name=datetime::${DATETIME}"

      - name: Send Email
        if: env.send_email == 'true'
        uses: cinotify/github-action@v1.6.0
        with:
          to: "${{ env.EMAIL_RECIPIENTS }}"
          subject: "[FPS Tools Availability Tracker] | ${{ env.NAME_OF_TOOL }} API Endpoint Status"
          body: "The ${{ env.NAME_OF_TOOL }} API endpoint is not accessible. The HTTP status code is ${{ env.STATE }}. Please investigate."
          type: "text/html"

  insert-mongo-data:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymongo

      - name: Insert data into MongoDB
        env:
          MONGODB_URI: ${{ secrets.MONGODB_CONNECTION_STRING }}
          DATABASE_NAME: FTATLogs
          COLLECTION_NAME: "FTAT Logs"
        run: |
          python -c "from pymongo import MongoClient; \
                     from datetime import datetime; \
                     import os; \
                     print('Connecting to MongoDB...'); \
                     client = MongoClient(os.environ['MONGODB_URI']); \
                     db = client[os.environ['DATABASE_NAME']]; \
                     collection = db[os.environ['COLLECTION_NAME']]; \
                     document = {'name': '${{ env.NAME_OF_TOOL }}', 'status': '${{ needs.ci.outputs.api_status }}', 'datetime': datetime.strptime('${{ needs.ci.outputs.datetime }}', '%Y-%m-%d %H:%M:%S')}; \
                     collection.insert_one(document); \
                     print('Data inserted successfully.')"
